{"version":3,"sources":["logo192.png","LeaderBoards/Board.js","TrackerForm/TrackerForm.js","LeaderBoards/Leaderboard.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Board","Component","activity","this","props","leaders","className","style","color","name","result","date","substring","indexOf","Leaderboard","findCategories","fullSet","cats","map","placed","i","length","push","splitByCategory","categories","catSplit","j","sort","activityResults","temp","contains","state","data","Tabletop","init","key","simpleSheet","callback","googleData","setState","console","log","events","forEach","catResult","printable","catRes","index","App","window","open","src","require","y","tagOuter","id","onClick","marginTop","marginBottom","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"gPAAAA,EAAOC,QAAU,IAA0B,qC,qICuC5BC,G,MC5BkBC,Y,YDDjC,uKAEQ,IAAIC,EAAWC,KAAKC,MAAMF,SACtBG,EAAUF,KAAKC,MAAMC,QAEzB,OACI,yBAAKC,UAAU,SACX,4BAAQA,UAAU,aACd,4BAAKJ,IAET,+BACI,4BACI,6BADJ,IACc,oCADd,IAC4B,sCAD5B,IAC4C,qCAE5C,4BACI,wBAAIK,MAAO,CAACC,MAAO,YAAnB,MADJ,IAC2C,4BAAKH,EAAQ,GAAGI,MAD3D,IACsE,4BAAKJ,EAAQ,GAAGK,QADtF,IACmG,4BAAKL,EAAQ,GAAGM,KAAKC,UAAU,EAAEP,EAAQ,GAAGM,KAAKE,QAAQ,QAE5J,4BACI,wBAAIN,MAAO,CAACC,MAAO,YAAnB,MADJ,IAC2C,4BAAKH,EAAQ,GAAGI,MAD3D,IACsE,4BAAKJ,EAAQ,GAAGK,QADtF,IACmG,4BAAKL,EAAQ,GAAGM,KAAKC,UAAU,EAAEP,EAAQ,GAAGM,KAAKE,QAAQ,QAE5J,4BACI,wBAAIN,MAAO,CAACC,MAAO,YAAnB,MADJ,IAC2C,4BAAKH,EAAQ,GAAGI,MAD3D,IACsE,4BAAKJ,EAAQ,GAAGK,QADtF,IACmG,4BAAKL,EAAQ,GAAGM,KAAKC,UAAU,EAAEP,EAAQ,GAAGM,KAAKE,QAAQ,cArBhL,GAA2BZ,c,iBE6GZa,EA9Gf,kDACI,aAAe,IAAD,8BACV,gBAgBJC,eAAiB,SAACC,GACd,IAAIC,EAAO,GAaX,OAZAD,EAAQE,KAAI,SAAAR,GAER,IADA,IAAIS,GAAS,EACLC,EAAE,EAAIA,EAAEJ,EAAQK,SAAWF,EAAQC,IACvC,GAAGH,EAAKG,IAAMV,EAAOR,SAAS,CAC1BiB,GAAS,EACT,MAGK,GAAVA,GACCF,EAAKK,KAAKZ,EAAOR,aAGlBe,GA/BG,EAkCdM,gBAAkB,SAACP,EAAUQ,GAEzB,IADA,IAAIC,EAAW,GACPL,EAAE,EAAGA,EAAEI,EAAWH,OAAQD,IAAI,CAElCK,EAASH,KADD,IAGZ,IAAI,IAAIF,EAAE,EAAIA,EAAEJ,EAAQK,OAASD,IAC7B,IAAI,IAAIM,EAAE,EAAIA,EAAED,EAASJ,OAASK,IAC9B,GAAGV,EAAQI,GAAGlB,UAAYsB,EAAWE,GAAG,CACpCD,EAASC,GAAGJ,KAAKN,EAAQI,IACzB,MAIZ,OAAOK,GAhDG,EAmDdE,KAAO,SAACC,GACJ,IAAIC,EAAO,KACX,GAAGD,EAAgB1B,SAAS4B,SAAS,KACjC,IAAI,IAAIV,EAAE,EAAIA,EAAEQ,EAAgBP,OAASD,IACrC,IAAI,IAAIM,EAAEN,EAAE,EAAIM,EAAEE,EAAgBP,OAASK,IACpCE,EAAgBF,GAAKE,EAAgBR,KACpCS,EAAOD,EAAgBR,GACvBQ,EAAgBR,GAAKQ,EAAgBF,GACrCE,EAAgBF,GAAKG,QAMjC,IAAI,IAAIT,EAAE,EAAIA,EAAEQ,EAAgBP,OAASD,IACrC,IAAI,IAAIM,EAAEN,EAAE,EAAIM,EAAEE,EAAgBP,OAASK,IACpCE,EAAgBF,GAAKE,EAAgBR,KACpCS,EAAOD,EAAgBR,GACvBQ,EAAgBR,GAAKQ,EAAgBF,GACrCE,EAAgBF,GAAKG,IApErC,EAAKE,MAAQ,CACXC,KAAM,IAHE,EADlB,gEAQyB,IAAD,OAChBC,IAASC,KAAK,CACVC,IAdI,+CAeJC,aAAa,EACbC,SAAU,SAAAC,GACN,EAAKC,SAAS,CAACP,KAAMM,SAbrC,+BA8Ec,IACCN,EAAQ7B,KAAK4B,MAAbC,KACPQ,QAAQC,IAAIT,GACZ,IAAIU,EAASvC,KAAKY,eAAeiB,GACjCQ,QAAQC,IAAIC,GACZ,IAAIjB,EAAWtB,KAAKoB,gBAAgBS,EAAKU,GACzCF,QAAQC,IAAIhB,GAEZA,EAASkB,SAAQ,SAAAC,GACVA,EAAUvB,OA1FC,IA2FVuB,EAAUtB,KAAK,CAACX,KAAM,aACtBiC,EAAUtB,KAAK,CAACX,KAAM,aACtBiC,EAAUtB,KAAK,CAACX,KAAM,iBAI9B,IAAIkC,EAAYpB,EAASP,KAAI,SAAS4B,EAASC,GAE3C,OADAP,QAAQC,IAAIK,GAER,kBAAC,EAAD,CAAO5C,SAAUwC,EAAOK,GAAQ1C,QAASyC,OAIjD,OACI,yBAAKxC,UAAU,aACVuC,OAvGjB,GAAiC5C,a,QC2BlB+C,E,wKA3BXC,OAAOC,KAAK,yG,+BAIZ,OACE,kBAAC,mBAAD,KACE,yBAAK5C,UAAU,OACb,yBAAKA,UAAU,cACb,yBAAK6C,IAAKC,EAAQ,IAAkB9C,UAAU,cAC9C,2DAEF,kBAAC,WAAD,CAAU+C,EAAG,CAAC,IAAK,IAAKC,SAAS,UAC/B,6BACE,4BAAQC,GAAG,KAAKC,QAASrD,KAAKqD,QAASlD,UAAU,aAAY,6CAC7D,6BACE,wBAAIC,MAAO,CAACC,MAAO,QAAUiD,UAAW,OAASC,aAAc,SAA/D,0BAGN,kBAAC,EAAD,a,GApBQzD,aCKE0D,QACW,cAA7BV,OAAOW,SAASC,UAEe,UAA7BZ,OAAOW,SAASC,UAEhBZ,OAAOW,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLnC,QAAQmC,MAAMA,EAAMC,c","file":"static/js/main.f9ffdcdf.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo192.28a651c6.png\";","import React, { Component } from 'react'\r\nimport {\r\n    useTable,\r\n    useGroupBy,\r\n    useFilters,\r\n    useSortBy,\r\n    useExpanded,\r\n    usePagination,\r\n  } from 'react-table'\r\n\r\nexport class Board extends Component {\r\n    render() {\r\n        let activity = this.props.activity;\r\n        let leaders = this.props.leaders;\r\n    \r\n        return (\r\n            <div className=\"Panel\">\r\n                <header className=\"PanelHead\">\r\n                    <h1>{activity}</h1>\r\n                </header>\r\n                <table>\r\n                    <tr>\r\n                        <th></th> <th>Name</th> <th>Result</th> <th>Date</th>\r\n                    </tr>\r\n                    <tr>\r\n                        <th style={{color: \"#7724bf\"}}>1.</th> <th>{leaders[0].name}</th> <th>{leaders[0].result}</th> <th>{leaders[0].date.substring(0,leaders[0].date.indexOf(' '))}</th>\r\n                    </tr>\r\n                    <tr>\r\n                        <th style={{color: \"#7724bf\"}}>2.</th> <th>{leaders[1].name}</th> <th>{leaders[1].result}</th> <th>{leaders[1].date.substring(0,leaders[1].date.indexOf(' '))}</th>\r\n                    </tr>\r\n                    <tr>\r\n                        <th style={{color: \"#7724bf\"}}>3.</th> <th>{leaders[2].name}</th> <th>{leaders[2].result}</th> <th>{leaders[2].date.substring(0,leaders[2].date.indexOf(' '))}</th>\r\n                    </tr>\r\n                </table>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Board\r\n","import React, { Component } from 'react';\r\nimport './TrackerForm.css';\r\nimport { Form, Text } from 'informed';\r\nimport { gapi } from 'gapi-script'\r\nimport { loadAuth2, loadAuth2WithProps } from 'gapi-script';\r\n\r\nconst SPREADSHEET_ID = '16OAWty-HNh9W1YhQi8UvOYeKyPp9PnBlr8WOAqrn1H4'; //from the URL of your blank Google Sheet\r\nconst CLIENT_ID = '957790443603-j0bgvoq95r4m0h2r3qqhndbjo1rfij1d.apps.googleusercontent.com'; //from https://console.developers.google.com/apis/credentials\r\nconst API_KEY = 'AIzaSyCvYqH9SIOAmG7Q-MTLA2CKcL9yGAp37Ug'; //https://console.developers.google.com/apis/credentials\r\nconst SCOPE = 'https://www.googleapis.com/auth/spreadsheets';\r\n\r\nexport class TrackerForm extends Component {\r\n    /*constructor(props) {\r\n        super(props);\r\n        this.onFormSubmit = this.onFormSubmit.bind(this); //to tie the form's callback to this class\r\n    }\r\n\r\n     async componentDidMount(){ //called automatically by React\r\n        this.handleClientLoad(); \r\n        let auth2 = await loadAuth2(CLIENT_ID, SCOPE);\r\n    }\r\n\r\n    handleClientLoad =()=> { //initialize the Google API\r\n        gapi.load('client:auth2', this.initClient);\r\n    }\r\n\r\n    initClient =()=> { //provide the authentication credentials you set up in the Google developer console\r\n        gapi.client.init({\r\n            'apiKey': API_KEY,\r\n            'clientId': CLIENT_ID,\r\n            'scope': SCOPE,\r\n            'discoveryDocs': ['https://sheets.googleapis.com/$discovery/rest?version=v4'],\r\n        }).then(()=> {\r\n            gapi.auth2.getAuthInstance().isSignedIn.listen(this.updateSignInStatus); //add a function called `updateSignInStatus` if you want to do something once a user is logged in with Google\r\n            this.updateSignInStatus(gapi.auth2.getAuthInstance().isSignedIn.get());\r\n        });\r\n    }\r\n\r\n    onFormSubmit(submissionValues) {\r\n        const params = {\r\n          // The ID of the spreadsheet to update.\r\n          spreadsheetId: SPREADSHEET_ID, \r\n          // The A1 notation of a range to search for a logical table of data.Values will be appended after the last row of the table.\r\n          range: 'Sheet1', //this is the default spreadsheet name, so unless you've changed it, or are submitting to multiple sheets, you can leave this\r\n          // How the input data should be interpreted.\r\n          valueInputOption: 'RAW', //RAW = if no conversion or formatting of submitted data is needed. Otherwise USER_ENTERED\r\n          // How the input data should be inserted.\r\n          insertDataOption: 'INSERT_ROWS', //Choose OVERWRITE OR INSERT_ROWS\r\n        };\r\n    \r\n        const valueRangeBody = {\r\n          'majorDimension': 'ROWS', //log each entry as a new row (vs column)\r\n          'values': [submissionValues] //convert the object's values to an array\r\n        };\r\n    \r\n        let request = gapi.client.sheets.spreadsheets.values.append(params, valueRangeBody);\r\n        request.then(function (response) {\r\n          // TODO: Insert desired response behaviour on submission\r\n          console.log(response.result);\r\n        }, function (reason) {\r\n          console.error('error: ' + reason.result.error.message);\r\n        });\r\n      }*/\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"Form\">\r\n                <h1>Form (Input/Write)</h1>\r\n                <Form onSubmit={this.onFormSubmit}>\r\n                    <label className=\"TxtF\">Name:<Text field=\"text\" name=\"name\" /></label>\r\n                    <label className=\"TxtF\">Activity:<Text field='activity' /></label>\r\n                    <label className=\"TxtF\">Result:<Text field='result' /></label>\r\n                    <button type='submit'>Submit</button>\r\n                </Form>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default TrackerForm\r\n","import React, { Component } from 'react'\r\nimport \"./LeaderBoard.css\"\r\nimport Board from \"./Board.js\"\r\nimport Tabletop from 'tabletop';\r\n\r\nconst sheetID = '16OAWty-HNh9W1YhQi8UvOYeKyPp9PnBlr8WOAqrn1H4';\r\nconst leaderboardLength = 3;\r\n\r\n\r\nexport class Leaderboard extends Component {\r\n    constructor() {\r\n        super()\r\n        this.state = {\r\n          data: []\r\n        }\r\n      }\r\n    \r\n    componentDidMount() {\r\n        Tabletop.init({\r\n            key: sheetID,\r\n            simpleSheet: true,\r\n            callback: googleData => {\r\n                this.setState({data: googleData})\r\n            },\r\n        })\r\n    }\r\n    \r\n    findCategories = (fullSet) => { //takes in full, unsorted, set of responses and finds the number of different categories\r\n        let cats = [];\r\n        fullSet.map(result => {\r\n            let placed = false;\r\n            for(let i=0 ; i<fullSet.length && !placed; i++){\r\n                if(cats[i] == result.activity){ //check if activity type has been recorded yet\r\n                    placed = true;\r\n                    break;\r\n                }\r\n            }\r\n            if(placed == false){ //is activity was not matched, it is added to running list of options\r\n                cats.push(result.activity);\r\n            }\r\n        })\r\n        return cats;\r\n    }\r\n\r\n    splitByCategory = (fullSet , categories) => { //split data by activity takes full set of unorganized data and the list of categories to spilt it into\r\n        let catSplit = []; //will become 2d array\r\n        for(let i=0; i<categories.length; i++){ //creates empty array for each category (to be filled with result objects)\r\n            let x = [];\r\n            catSplit.push(x);\r\n        }\r\n        for(let i=0 ; i<fullSet.length ; i++){\r\n            for(let j=0 ; j<catSplit.length ; j++){\r\n                if(fullSet[i].activity == categories[j]){\r\n                    catSplit[j].push(fullSet[i]);\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n        return catSplit;\r\n    }\r\n   \r\n    sort = (activityResults) => { //bubble sort that can sort in either direction\r\n        let temp = null;\r\n        if(activityResults.activity.contains('*')) { //for activities where higher is better\r\n            for(let i=0 ; i<activityResults.length ; i++){\r\n                for(let j=i+1 ; j<activityResults.length ; j++){\r\n                    if(activityResults[j] > activityResults[i]){\r\n                        temp = activityResults[i];\r\n                        activityResults[i] = activityResults[j];\r\n                        activityResults[j] = temp;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        else { //for categories where lower is better\r\n            for(let i=0 ; i<activityResults.length ; i++){\r\n                for(let j=i+1 ; j<activityResults.length ; j++){\r\n                    if(activityResults[j] < activityResults[i]){\r\n                        temp = activityResults[i];\r\n                        activityResults[i] = activityResults[j];\r\n                        activityResults[j] = temp;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    render() {\r\n        const {data} = this.state;\r\n        console.log(data); //print entire unchange data set \r\n        let events = this.findCategories(data) //holds all categories that were found\r\n        console.log(events); //print different categories\r\n        let catSplit = this.splitByCategory(data,events);\r\n        console.log(catSplit);\r\n\r\n        catSplit.forEach(catResult => {\r\n            if(catResult.length < leaderboardLength){\r\n                catResult.push({date: '--/--/--'});\r\n                catResult.push({date: '--/--/--'});\r\n                catResult.push({date: '--/--/--'});\r\n            }\r\n        })\r\n\r\n        let printable = catSplit.map(function(catRes , index){\r\n            console.log(catRes);\r\n            return(\r\n                <Board activity={events[index]} leaders={catRes}></Board>\r\n            )    \r\n        })\r\n\r\n        return (\r\n            <div className=\"AllBoards\">\r\n                {printable}\r\n            </div>\r\n            \r\n        )\r\n    }\r\n}\r\n\r\nexport default Leaderboard\r\n","import React, { Component } from 'react';\nimport './App.css';\nimport Form from './TrackerForm/TrackerForm.js'\nimport Leaderboards from \"./LeaderBoards/Leaderboard.js\"\nimport { ParallaxProvider } from 'react-scroll-parallax';\nimport { Parallax } from 'react-scroll-parallax';\n\nclass App extends Component {\n  onClick(){\n    window.open(\"https://docs.google.com/forms/d/e/1FAIpQLSc5nCn8MUGjQGK5BxWgcf7XnF1xpUzAO66g86CUjO2SBHsA-Q/viewform\");\n}\n  \n  render() {\n    return (\n      <ParallaxProvider>\n        <div className=\"App\">\n          <div className=\"App-header\">\n            <img src={require(\"./logo192.png\")} className=\"Head-logo\"></img>\n            <h1>Western Open Ultimate 2020</h1>\n          </div>\n          <Parallax y={[30, -10]} tagOuter=\"figure\">\n            <div>\n              <button id=\"bt\" onClick={this.onClick} className=\"AA-button\"><h2>Add Activity</h2></button>\n              <div>\n                <h1 style={{color: \"white\" , marginTop: \"1rem\" , marginBottom: \"0rem\"}}>Current Leaderboards</h1>\n              </div>\n            </div>\n          <Leaderboards/>\n          </Parallax>\n        </div>\n      </ParallaxProvider>\n      \n    );\n  }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}